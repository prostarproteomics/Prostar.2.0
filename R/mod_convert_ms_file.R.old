# Module UI

#' @title   mod_convert_ms_file_ui and mod_convert_ms_file_server
#' @description  A shiny Module.
#'
#' @param id shiny id
#' @param input internal
#' @param output internal
#' @param session internal
#'
#' @rdname mod_convert_ms_file
#'
#' @keywords internal
#' @export 
#' @importFrom shiny NS tagList 
mod_convert_ms_file_ui <- function(id){
  ns <- NS(id)
  tagList(

  )
}

# Module Server

#' @rdname mod_convert_ms_file
#' 
#' @export
#' 
#' @keywords internal
#' 
#' @importFrom shinyBS bsModal
#' @importFrom shinyjs hidden toggle
#' @importFrom htmlwidgets JS
#' 
mod_convert_ms_file_server <- function(id){
  
  
  moduleServer(id, function(input, output, session){
    ns <- session$ns
    
    
    mod_popover_for_help_server("modulePopover_convertChooseDatafile", 
                                data = reactive(list(title = HTML(paste0("<strong><font size=\"4\">Data file</font></strong>")), 
                                                     content="Select one (.txt, .csv, .tsv, .xls, .xlsx) file.")))
    
    # Variable to manage the different screens of the module
    r.nav <- reactiveValues(
      name = "Convert",
      stepsNames = c("Select file", "Data Id", "Epx. & feat. data", "Build design", "Convert"),
      ll.UI = list( screenStep1 = uiOutput(ns("Convert_SelectFile")),
                    screenStep2 = uiOutput(ns("Convert_DataId")),
                    screenStep3 = uiOutput(ns("Convert_ExpFeatData")),
                    screenStep4 = uiOutput(ns("Convert_BuildDesign")),
                    screenStep5 = uiOutput(ns("Convert_Convert"))
      ),
      isDone =  rep(FALSE,5),
      mandatory =  rep(FALSE,5),
      reset = FALSE
    )
    
    ## reactive values for variables in the module
    rv.convert <- reactiveValues(
      data2convert = NULL,
      dataIn = NULL,
      obj =  NULL,
      design = NULL,
      hot = NULL,
      tab1 = NULL,
      
      choose_col_Parent_Protein = NULL,
      choose_keyID = NULL,
      
      designChecked = NULL,
      # contient l'objet de sortie du module (ie. a MAE instance)
      dataOut = NULL, 
      name = "processConvert"
    )
    
    
    
    observeEvent(req(r.nav$reset),{
      
      
      ## update widgets whose names are in r.widgets with the value in this list
      ## This part must be before the reinitialization of r.nav$isDone
      # updateCheckboxInput(session,'selectIdent', value=NULL)
      # updateSelectInput(session,'convert_proteinId', selected=NULL)
      # updateSelectInput(session,'idBox', selected=NULL)
      # updateRadioButtons(session, "typeOfData", selected=NULL)
      # updateRadioButtons(session, "checkDataLogged", selected=NULL)
      # updateCheckboxInput(session,"replaceAllZeros", value=NULL)
      
      ## do not modify this part
      r.nav$isDone <- rep(FALSE, 5)
      r.nav$reset <- FALSE
      ## end of no modifiable part
    })
    
    
   
    
    
    
    #### END of template part of the module
    
    mod_insert_md_server("FAQ_MD2",URL_FAQ)
    
    ##
    ## Definitions of the screens
    ##
    
    ###---------------------------------------------------------------------------------###
    ###                                 Screen 1                                        ###
    ###---------------------------------------------------------------------------------###
    output$Convert_SelectFile <- renderUI({
      tagList(
        mod_import_file_from_ui(ns('importFile')),
        br(),
        uiOutput(ns("ConvertOptions"))
      )
    })
    
    
    
    output$ConvertOptions <- renderUI({
      tagList(
        radioButtons(ns("typeOfData"),
                     "Choose the type of your data",
                     choices=c("peptide" = "peptide",
                               "protein" = "protein")
        )
        
        ,radioButtons(ns("checkDataLogged"),
                      "Are your data already log-transformed ?",
                      #width = widthWellPanel,
                      choices=c("yes (they stay unchanged)" = "yes",
                                "no (they will be log-transformed by the conversion tool)"="no"),
                      selected="no")
        # ,br()
        # ,checkboxInput(ns("replaceAllZeros"),
        #                "Replace all '0' and 'NaN' by NA",
        #                value= TRUE)
      )
    })
    
    
    rv.convert$data2convert <- mod_import_file_from_server('importFile')
    
    observeEvent(req(rv.convert$data2convert()),{ 
      rv.convert$dataIn <- rv.convert$data2convert()
      r.nav$isDone[1] <- TRUE
    })
    
    ###---------------------------------------------------------------------------------###
    ###                                 Screen 2                                        ###
    ###---------------------------------------------------------------------------------###
    output$Convert_DataId <- renderUI({
      
      mod_select_keyID_ui(ns('mod_keyId'))
    })
    
    rv.convert$IDs <- mod_select_keyID_server("mod_keyId", 
                                              dataIn = reactive({rv.convert$dataIn}),
                                              typeOfData = reactive({input$typeOfData})
    )
    
    
    observe({
      req(rv.convert$IDs())
      rv.convert$choose_col_Parent_Protein <- rv.convert$IDs()$parentProtId
      rv.convert$choose_keyID <- rv.convert$IDs()$keyId
      r.nav$isDone[2] <- !is.null(rv.convert$IDs())
    })
    
    
    
    
    ###---------------------------------------------------------------------------------###
    ###                                 Screen 3                                        ###
    ###---------------------------------------------------------------------------------###
    output$Convert_ExpFeatData <- renderUI({
      
      tagList(
        fluidRow(
          column(width=4,uiOutput(ns("choose_quanti_data_col_ui"),width = "400px"))
          ,column(width=8,
                  shinyjs::hidden(checkboxInput(ns("select_Identification"), 
                                                "Select columns for identification method", 
                                                value = NULL))
                  ,uiOutput(ns("check_Identification_Tab_ui"))
                  
                  ,tags$script(HTML("Shiny.addCustomMessageHandler('unbind-DT', function(id) {
                                   Shiny.unbindAll($('#'+id).find('table').DataTable().table().node());
                                   })"))
                  ,uiOutput(ns('show_Identification_Tab_ui'))
          )
        )
      )
    })
    
    
    
    mod_popover_for_help_server("modulePopover_convertDataQuanti", 
                                data = list(title = h3('Quantitative data'), 
                                            content="Select the columns that are quantitation values by clicking in the field below."))
    
    
    
    output$choose_quanti_data_col_ui <- renderUI({
      req(rv.convert$dataIn)
      tagList(
        mod_popover_for_help_ui(ns("modulePopover_convertDataQuanti")),
        selectInput(ns("choose_quanti_data_col"),
                    label = "",
                    choices = colnames(rv.convert$dataIn),
                    selected = character(0),
                    multiple = TRUE, 
                    width='200px',
                    size = 20,
                    selectize = FALSE)
      )
    })
    
    observeEvent(input$choose_quanti_data_col,{
      shinyjs::toggle('select_Identification', condition=length(input$choose_quanti_data_col)>0)
    })
    
    
    
    check_Identification_Tab <- reactive({
      req(input$select_Identification)
      req(input$choose_quanti_data_col)
      
      temp <- shinyValue("colForOriginValue_",length(input$choose_quanti_data_col))
      
      isOk <- TRUE
      msg <- NULL
      if ((length(which(temp == "None")) == length(temp)))
      {
        isOk <- TRUE
        msg <- "Correct"
      }  else {
        if (length(which(temp == "None")) > 0)
        {
          isOk <- FALSE
          msg <- "The identification method is not appropriately defined for each sample."
        } else {
          if(length(temp) != length(unique(temp))){
            isOk <- FALSE
            msg <- "There are duplicates in identification columns."
          }else {
            isOk <- TRUE
            msg <- "Correct"
          }
        }
      }
      
      rep <- list(isOk=isOk, msg = msg)
      rep
    })
    
    output$check_Identification_Tab_ui <- renderUI({
      rep <- check_Identification_Tab()
      
      if (isTRUE(rep$isOk)){
        img <- "images/Ok.png"
      } else {
        img <-"images/Problem.png"
      }
      tags$div(
        tags$div(
          tags$div(style="display:inline-block;",tags$img(src = img, height=25)),
          tags$div(style="display:inline-block;",tags$p(rep$msg))
        )
      )
    })
    
    
    
    #####################
    
    
    
    
    # observeEvent(input$fData.box,ignoreInit = TRUE,{
    #   
    #   choices = colnames(rv$tab1)[-which(colnames(rv$tab1) %in% input$fData.box)]
    #   names(choices) = 
    #     colnames(rv$tab1)[-which(colnames(rv$tab1) %in% input$fData.box)]
    #   updateSelectInput(session, "choose_quanti_data_colx", 
    #                     label = "",
    #                     choices = choices,
    #                     selected = input$choose_quanti_data_col)
    # })
    # 
    
    
    output$show_Identification_Tab_ui <- renderUI({
      
      if (length(input$choose_quanti_data_col) == 0 || !isTRUE(input$select_Identification)){
        return(NULL)
      }
      DT::dataTableOutput(ns("show_table"), width='500px')
    })
    
    
    output$show_table <- DT::renderDataTable(
      quantiDataTable(),
      escape=FALSE,
      rownames = FALSE,
      extensions = c('Scroller'),
      server=FALSE,
      selection='none',
      class = 'compact',
      options=list(
        preDrawCallback=JS(
          'function() {
            Shiny.unbindAll(this.api().table().node());}'),
        drawCallback= JS(
          'function(settings) {
            Shiny.bindAll(this.api().table().node());}'),
        # rowCallback = JS("function(r,d) {$(r).attr('height', '10px')}"),
        dom = 'Bfrtip',
        autoWidth=TRUE,
        deferRender = TRUE,
        bLengthChange = FALSE,
        scrollX = 200,
        scrollY = 500,
        scroller = TRUE,
        ajax = list(url = dataTableAjax(session, quantiDataTable()))
        
      )
      
    )
    
    
    
    quantiDataTable <- reactive({
      if(is.null(input$choose_quanti_data_col)) return(NULL)
      if(is.null(rv.convert$dataIn)) return(NULL)
      
      session$sendCustomMessage('unbind-DT', 'show_table')
      df <- NULL
      choices <- c("None",colnames(rv.convert$dataIn))
      names(choices) <- c("None",colnames(rv.convert$dataIn))
      
      if (isTRUE(input$select_Identification)) {
        
        df <- data.frame(as.data.frame(input$choose_quanti_data_col),
                         shinyInput(selectInput,
                                    ns("colForOriginValue_"),
                                    nrow(as.data.frame(input$choose_quanti_data_col)),
                                    choices=choices)
        )
        colnames(df) <- c("Sample", "Identification method")
      } else {
        df <- data.frame(Sample = as.data.frame(input$choose_quanti_data_col))
        colnames(df) <- c("Sample")
      }
      
      
      df
    })
    
    observe({
      input$select_Identification
      if (isTRUE(input$select_Identification)){
        r.nav$isDone[3] <- length(input$choose_quanti_data_col)>0  && check_Identification_Tab()$isOk 
      } else {
        r.nav$isDone[3] <- length(input$choose_quanti_data_col)>0 
      }
    })
    
    
    #observeEvent(shinyValue("colForOriginValue_",nrow(quantiDataTable())),{})
    
    
    ###---------------------------------------------###
    ###                 Screen 4                    ###
    ###---------------------------------------------###
    rv.convert$design <- mod_build_design_server('buildDesign', sampleNames=reactive({input$choose_quanti_data_col}))
    
    output$Convert_BuildDesign <- renderUI({
      mod_build_design_ui(ns('buildDesign'))
    })
    
    
    observeEvent(req(rv.convert$design()), {
      
      r.nav$isDone[4] <- TRUE
    })
    
    
    ###---------------------------------------------###
    ###                 Screen 5                    ###
    ###---------------------------------------------###
    output$Convert_Convert <- renderUI({
      tagList(
        #uiOutput(ns("checkAll_convert"), width="50"),
        #htmlOutput(ns("msgAlertCreateMSnset")),
        #hr(),
        textInput(ns("studyName"),"Enter the name of the study"),
        mod_choose_pipeline_ui(ns('choose_pipeline_ui')),
        actionButton(ns("createMSnsetBtn"),"Convert data", class = actionBtnClass),
        
        p("Once the 'Load' button (above) clicked, you will be automatically redirected to Prostar home page. The dataset will be accessible within Prostar 
        interface and processing menus will be enabled. However, all importing functions ('Open MSnset', 'Demo data' and 'Convert data') will be disabled 
        (because successive dataset loading can make Prostar unstable). To work on another dataset, use first the 'Reload Prostar' functionality from 
        the 'Dataset manager' menu: it will make Prostar restart with a fresh R session where import functions are enabled.")
      )
    })
    
    
    
    rv.convert$pipeline <- mod_choose_pipeline_server('choose_pipeline_ui', dataType = input$typeOfData, package='MSPipelines')
    
    output$conversionDone <- renderUI({
      
      h4("The conversion is done. Your dataset has been automatically loaded 
       in memory. Now, you can switch to the Descriptive statistics panel to 
       vizualize your data.")
    })
    
    
    
    observeEvent(input$createMSnsetBtn,{
      print('In observeEvent de input$createMSnsetBtn')
      # colNamesForOriginofValues <- NULL
      # if (isTRUE(rv$widgets$Convert$selectIdent)) {
      #   colNamesForOriginofValues <- shinyValue("colForOriginValue_",nrow(quantiDataTable()))
      #   if (length(which(colNamesForOriginofValues == "None")) >0){ return (NULL)   }
      # } 
      # 
      
      
      #ext <- GetExtension(rv.convert$datafile$name)
      ## quanti data
      tmp_quanti_data <- input$choose_quanti_data_col
      indexForQuantiData <- match(tmp_quanti_data, colnames(rv.convert$dataIn))
      quanti_order <- order(input$choose_quanti_data_col)
      samples_order <- order(rownames(rv.convert$design()))
      
      if (sum(quanti_order != samples_order) > 0){
        tmp_quanti_data <- tmp_quanti_data[samples_order]
        indexForQuantiData <- indexForQuantiData[samples_order]
      }
      
      indexForFData <- seq(1,ncol(rv.convert$dataIn))[-indexForQuantiData]
      
      ## key id of entities
      key_id_index <- NULL
      if (rv.convert$choose_keyID != "AutoID") {
        key_id_index <- match(rv.convert$choose_keyID, colnames(rv.convert$dataIn))
      }
      
      
      ### Sample data
      design <- rv.convert$design()
      
      ### Are data alearady logged ?
      logged_data <- (input$checkDataLogged == "no")
      
      
      ### Origin of Values
      #indexForOriginOfValue <- NULL
      colNamesForOriginofValues <- shinyValue("colForOriginValue_",length(input$choose_quanti_data_col))
      
      if (sum(is.na(colNamesForOriginofValues))==length(colNamesForOriginofValues))
        colNamesForOriginofValues <- NULL
      
      
      # if (!is.null(colNamesForOriginofValues) && (length(grep("None", colNamesForOriginofValues))==0)  && (sum(is.na(colNamesForOriginofValues)) == 0)){
      #   for (i in 1:length(tmp_quanti_data)){
      #     indexForOriginOfValue <- c(indexForOriginOfValue, which(colnames(rv.convert$dataIn) == input[[paste0("colForOriginValue_", i)]]))
      #   }
      # }
      
      
      # versions <- list(Prostar_Version = installed.packages(lib.loc = Prostar.loc)["Prostar2","Version"],
      #                  DAPAR_Version = installed.packages(lib.loc = DAPAR.loc)["DAPAR2","Version"]
      # )
      
      tryCatch({
        switch(names(rv.convert$pipeline()),
               peptide = {
                 rv.convert$dataOut <- DAPAR2::createFeatures(data = rv.convert$dataIn,
                                                              sample = design,
                                                              indExpData = indexForQuantiData,
                                                              keyId = key_id_index,
                                                              namesOrigin = colNamesForOriginofValues,
                                                              logTransform = logged_data,
                                                              typeOfData = input$typeOfData,
                                                              parentProtId = gsub(".", "_", input$choose_col_Parent_Protein, fixed=TRUE),
                                                              analysis= input$studyName,
                                                              processes=pipeline.def()$peptide,
                                                              pipelineType = names(rv.convert$pipeline())
                 )
               },
               protein = {
                 rv.convert$dataOut <- DAPAR2::createFeatures(data = rv.convert$dataIn,
                                                              sample = design,
                                                              indExpData = indexForQuantiData,
                                                              keyId = key_id_index,
                                                              namesOrigin = colNamesForOriginofValues,
                                                              logTransform = logged_data,
                                                              typeOfData = input$typeOfData,
                                                              parentProtId = NULL,
                                                              analysis= input$studyName,
                                                              processes=pipeline.def()$protein,
                                                              pipelineType = names(rv.convert$pipeline())
                 )
               },
               p2p = {
                 
               },
               default=NULL)
        
        
        #loadObjectInMemoryFromConverter()
        
      }
      , warning = function(w) {
        if (conditionMessage(w) %in% c("NaNs produced", "production de NaN")){
          shinyjs::info(paste("Warning : Your original dataset may contain negative values",
                              "so that they cannot be logged. Please check back the dataset or",
                              "the log option in the first tab.",
                              sep=" "))
        }
        # else {
        #       shinyjs::info(paste("Warning in CreateMSnSet",":",
        #                           conditionMessage(w),
        #                           sep=" "))
        #   }
      }, error = function(e) {
        print(e)
        # shinyjs::info(paste("Error :","CreateMSnSet",":",
        #                     conditionMessage(e),
        #                     sep=" "))
      }, finally = {
        #cleanup-code
      })
      
      r.nav$isDone[5] <- TRUE    
      
    })
    
    
    #  
    #  ############################################################################
    #  ####### ENd definitino of UI   ##################
    #  #############################################################################
    
    
    return(reactive({rv.convert$dataOut}))
    
    
  })
  
  
}

## To be copied in the UI
# mod_convert_ms_file_ui("convert_ms_file_ui_1")

## To be copied in the server
# callModule(mod_convert_ms_file_server, "convert_ms_file_ui_1")